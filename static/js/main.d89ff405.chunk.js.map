{"version":3,"sources":["components/Cell.js","components/Board.js","components/Modal.js","components/App.js","serviceWorker.js","index.js"],"names":["Cell","props","react_default","a","createElement","className","onClick","onCellClick","position","Board","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleCellClick","event","preventDefault","eventCell","target","getAttribute","playerMove","updateCellValue","classList","add","activePlayer","checkGameWin","state","board","values","split","length","newBoard","setState","i","size","row","j","push","_this2","map","rowIndex","cell","cellIndex","components_Cell","key","concat","Component","Modal","refreshPage","window","location","reload","winner","App","x","Number","y","moveCount","boardSize","checkRows","checkColumns","checkDiagonals","Math","pow","gameOver","nextPlayer","_this$state","components_Board","components_Modal","Boolean","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d89ff405.chunk.js","sourcesContent":["import React from 'react';\n\nconst Cell = (props) => (\n  <div className=\"cell\" onClick={props.onCellClick} position={props.position}></div>\n)\n\nexport default Cell;","import React, { Component } from 'react';\nimport Cell from './Cell.js';\n\nclass Board extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      board: [],\n    }\n\n    // Starting board\n    for (let i = 0; i < this.props.size; i++) {\n      let row = [];\n      for (let j = 0; j < this.props.size; j++) {\n        row.push(0);\n      }\n      this.state.board.push(row);\n    }\n  }\n\n  // Handle players move\n  handleCellClick = (event) => {\n    event.preventDefault();\n    let eventCell = event.target;\n    eventCell.position = eventCell.getAttribute('position');\n\n    // Update cell and check game win condition\n    let playerMove = this.updateCellValue(eventCell.position);\n    if (playerMove) {\n      eventCell.classList.add(this.props.activePlayer);\n      this.props.checkGameWin(this.state.board, playerMove);\n    };\n  }\n\n  // Sets value on the clicked cell\n  updateCellValue = (position) => {\n    let values = position.split('-');\n    if (values.length === 2) {\n      if (this.state.board[values[0]][values[1]] === 0) {\n        let newBoard = this.state.board;\n        newBoard[values[0]][values[1]] = this.props.activePlayer;\n        this.setState({board: newBoard});\n        return values;\n      }\n    }\n    return false;\n  }\n\n  render() {\n    return (\n      <div className=\"board\">\n        {this.state.board.map((row, rowIndex) => \n          row.map((cell, cellIndex) => (\n            <Cell key={cellIndex} position={`${rowIndex}-${cellIndex}`} onCellClick={this.handleCellClick}></Cell>\n          ))\n        )}\n      </div>\n    )\n  }\n}\n\nexport default Board;","import React, { Component} from 'react';\n\nclass Modal extends Component {\n  refreshPage = () => {\n    window.location.reload(true);\n  }\n\n  render() {\n    const { winner } = this.props\n    return (\n      <div className=\"modal\">\n        <div className=\"modal-content\">\n          {winner !== 'tie' && (\n            <h2 className=\"modal-message\">Player <span>{winner}</span> wonâ€¦ Congratulations!</h2>\n          )} \n          {winner === 'tie' && (\n            <h2 className=\"modal-message\">It's a tie!</h2>\n          )}\n          <button className=\"play-button\" onClick={this.refreshPage}>Play again</button>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Modal;","import React, { Component } from 'react';\nimport Board from './Board.js';\nimport Modal from './Modal.js';\nimport '../css/App.css';\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.boardSize = 3;\n    this.moveCount = 0;\n\n    this.state = {\n      activePlayer: 'cross', // cross is P1, circle is P2\n      gameOver: false,\n    }\n  }\n\n  // Check game win condition\n  checkGameWin = (board, playerMove) => {\n    let x = Number(playerMove[0]);\n    let y = Number(playerMove[1]);\n    \n    // Check only when a player has enough moves to win\n    if (this.moveCount >= ((this.boardSize * 2) - 2)) { \n      if (!this.checkRows(board, x)) {\n        if (!this.checkColumns(board, y)) {\n          if (!this.checkDiagonals(board, x, y)) {\n            if (this.moveCount === (Math.pow(this.boardSize, 2) - 1)) {\n              this.setState({gameOver: 'tie'});\n            }\n          }\n        }\n      }\n    }\n\n    // Turn for next player if game is not over\n    if (!this.state.gameOver) {\n      this.nextPlayer();      \n    }\n  }\n\n  // Check rows for a match\n  checkRows = (board, x) => {\n    for (let i = 0; i < this.boardSize; i++) {\n      if (board[x][i] !== this.state.activePlayer)\n        break;\n      if (i === this.boardSize - 1) {\n        this.setState({gameOver: this.state.activePlayer})\n        return true;\n      }\n    }\n    return false;\n  }\n\n  // Check columns for match\n  checkColumns = (board, y) => {\n    for (let j = 0; j < this.boardSize; j++) {\n      if (board[j][y] !== this.state.activePlayer)\n        break;\n      if (j === this.boardSize - 1) {\n        this.setState({gameOver: this.state.activePlayer})\n        return true;\n      } \n    }\n    return false;\n  }\n\n  // Check diagonals for a match\n  checkDiagonals = (board, x, y) => {\n    // Diagonal\n    if (x === y) {\n      for (let i = 0; i < this.boardSize; i++) {\n        if (board[i][i] !== this.state.activePlayer)\n          break;\n        if (i === this.boardSize - 1) {\n          this.setState({gameOver: this.state.activePlayer})\n          return true;\n        } \n      }\n    // Anti-diagonal\n    } else if (x + y === this.boardSize - 1) { \n      for (let i = 0; i < this.boardSize; i++) {\n        if (board[i][(this.boardSize-1-i)] !== this.state.activePlayer)\n          break;\n        if (i === this.boardSize - 1) {\n          this.setState({gameOver: this.state.activePlayer})\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  // Turn moves to the other player\n  nextPlayer = () => {\n    if (this.state.activePlayer === 'cross') {\n      this.setState({activePlayer: 'circle'});\n    } else {\n      this.setState({activePlayer: 'cross'});\n    }\n\n    this.moveCount++;\n  }\n\n  render() {\n    const { activePlayer, gameOver } = this.state;\n\n    return (\n      <div className=\"App\">\n         <Board onCellClick={this.handleCellClick} activePlayer={activePlayer} checkGameWin={this.checkGameWin} size={this.boardSize} /> \n        {gameOver && (\n          <Modal activePlayer={activePlayer} winner={gameOver}/>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}