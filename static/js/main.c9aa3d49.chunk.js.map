{"version":3,"sources":["sounds/cross.wav","sounds/circle.wav","sounds/tie.wav","sounds/win.wav","components/Cell.js","components/Board.js","sounds.js","components/Modal.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Cell","props","react_default","a","createElement","className","concat","cellClass","onClick","onCellClick","event","position","undefined","Board","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","adjustCellSize","boardSize","css","head","document","querySelector","style","type","styleSheet","cssText","appendChild","createTextNode","handleCellClick","preventDefault","playerMove","updateCellValue","checkGameWin","state","board","_position$split","split","_position$split2","slicedToArray","x","y","newBoard","activePlayer","setState","i","size","row","j","push","_this2","map","rowIndex","key","cell","cellIndex","components_Cell","Component","crossMove","Audio","require","circleMove","tie","win","Modal","refreshPage","window","location","reload","winner","Sound","play","App","Number","moveCount","checkRows","checkColumns","checkDiagonals","gameOver","Math","pow","nextPlayer","_this$state","components_Board","components_Modal","Boolean","hostname","match","ReactDOM","render","components_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c9aa3d49.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cross.7064725d.wav\";","module.exports = __webpack_public_path__ + \"static/media/circle.404baaf3.wav\";","module.exports = __webpack_public_path__ + \"static/media/tie.f9f91aa5.wav\";","module.exports = __webpack_public_path__ + \"static/media/win.dec3e6c9.wav\";","import React from 'react';\n\nconst Cell = (props) => (\n  <div className={`cell ${props.cellClass}`} onClick={!props.onCellClick ? undefined : event => props.onCellClick(event,props.position)}></div>\n)\n\nexport default Cell;","import React, { Component } from 'react';\nimport Cell from './Cell.js';\n\nclass Board extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      board: [],\n    }\n\n    // Starting board\n    for (let i = 0; i < this.props.size; i++) {\n      let row = [];\n      for (let j = 0; j < this.props.size; j++) {\n        row.push(0);\n      }\n      this.state.board.push(row);\n    }\n\n    this.adjustCellSize(this.props.size);\n  }\n\n  // Adjust cells size based on the boardSize\n  adjustCellSize = (boardSize) => {\n    let css = `.cell { width: calc(80vw/${boardSize}); height:calc(80vw/${boardSize}) }`;\n    const head = document.querySelector(\"head\");\n    const style = document.createElement('style');\n    style.type = 'text/css';\n\n    if (style.styleSheet){\n      // This is required for IE8 and below.\n      style.styleSheet.cssText = css;\n    } else {\n      style.appendChild(document.createTextNode(css));\n    }\n\n    head.appendChild(style);\n  }\n\n  // Handle players move\n  handleCellClick = (event, position) => {\n    event.preventDefault();\n\n    // Update cell and check game win condition\n    let playerMove = this.updateCellValue(position);\n    if (playerMove) {\n      this.props.checkGameWin(this.state.board, playerMove);\n    };\n  }\n\n  // Sets value on the clicked cell\n  updateCellValue = (position) => {\n    let [ x, y ] = position.split('-');\n    let newBoard = this.state.board;\n    newBoard[x][y] = this.props.activePlayer;\n    this.setState({board: newBoard});\n    \n    return [ x, y ];\n  }\n\n  render() {\n    return (\n      <div className={`board ${this.props.activePlayer}`}>\n        {this.state.board.map((row, rowIndex) => (\n          <div className=\"row\" key={rowIndex}>\n            {row.map((cell, cellIndex) => (\n            <Cell key={cellIndex} position={`${rowIndex}-${cellIndex}`} onCellClick={!cell ? this.handleCellClick : undefined} cellClass={cell}></Cell>\n          ))}\n          </div>\n        ))}\n      </div>\n    )\n  }\n}\n\nexport default Board;","export const crossMove =  new Audio(require('./sounds/cross.wav'));\nexport const circleMove =  new Audio(require('./sounds/circle.wav'));\nexport const tie =  new Audio(require('./sounds/tie.wav'));\nexport const win =  new Audio(require('./sounds/win.wav'));\n\n\n","import React, { Component} from 'react';\nimport * as Sound from '../sounds.js';\n\nclass Modal extends Component {\n  refreshPage = () => {\n    window.location.reload(true);\n  }\n\n  render() {\n    const { winner } = this.props;\n    (winner === 'tie') ? Sound.tie.play() : Sound.win.play();\n\n    return (\n      <div className=\"modal\">\n        <div className=\"modal-content\">\n          {winner !== 'tie' && (\n            <h2 className=\"modal-message\">Player <span>{winner}</span> wonâ€¦ Congratulations!</h2>\n          )} \n          {winner === 'tie' && (\n            <h2 className=\"modal-message\">It's a tie!</h2>\n          )}\n          <button className=\"play-button\" onClick={this.refreshPage}>Play again</button>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Modal;","import React, { Component } from 'react';\nimport Board from './Board.js';\nimport Modal from './Modal.js';\nimport * as Sound from '../sounds.js';\nimport '../css/App.css';\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.boardSize = 3; // Indicates the number of rows and columns of the board, you can increase this number to create a bigger board;\n    this.moveCount = 0;\n\n    this.state = {\n      activePlayer: 'cross', // cross is P1, circle is P2\n      gameOver: false,\n    }\n  }\n\n  // Check game win condition\n  checkGameWin = (board, playerMove) => {\n    let x = Number(playerMove[0]);\n    let y = Number(playerMove[1]);\n    \n    // Check only when a player has enough moves to win\n    if (this.moveCount >= ((this.boardSize * 2) - 2)) { \n      if (this.checkRows(board, x) || this.checkColumns(board, y) || this.checkDiagonals(board, x, y)) {\n        this.setState({gameOver: this.state.activePlayer});\n      } else if (this.moveCount === (Math.pow(this.boardSize, 2) - 1)) {\n        this.setState({gameOver: 'tie'});\n      }\n    }\n\n    // Turn for next player if game is not over\n    if (!this.state.gameOver) {\n      this.nextPlayer();      \n    }\n  }\n\n  // Check rows for a match\n  checkRows = (board, x) => {\n    for (let i = 0; i < this.boardSize; i++) {\n      if (board[x][i] !== this.state.activePlayer)\n        break;\n      if (i === this.boardSize - 1) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  // Check columns for match\n  checkColumns = (board, y) => {\n    for (let j = 0; j < this.boardSize; j++) {\n      if (board[j][y] !== this.state.activePlayer)\n        break;\n      if (j === this.boardSize - 1) {\n        return true;\n      } \n    }\n    return false;\n  }\n\n  // Check diagonals for a match\n  checkDiagonals = (board, x, y) => {\n    // Diagonal\n    if (x === y) {\n      for (let i = 0; i < this.boardSize; i++) {\n        if (board[i][i] !== this.state.activePlayer)\n          break;\n        if (i === this.boardSize - 1) {\n          return true;\n        } \n      }\n    // Anti-diagonal\n    } else if (x + y === this.boardSize - 1) { \n      for (let i = 0; i < this.boardSize; i++) {\n        if (board[i][(this.boardSize-1-i)] !== this.state.activePlayer)\n          break;\n        if (i === this.boardSize - 1) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  // Turn moves to the other player\n  nextPlayer = () => {\n    if (this.state.activePlayer === 'cross') {\n      Sound.crossMove.play();\n      this.setState({activePlayer: 'circle'});\n    } else {\n      Sound.circleMove.play();\n      this.setState({activePlayer: 'cross'});\n    }\n\n    this.moveCount++;\n  }\n\n  render() {\n    const { activePlayer, gameOver } = this.state;\n\n    return (\n      <div className=\"App\">\n         <Board onCellClick={this.handleCellClick} activePlayer={activePlayer} checkGameWin={this.checkGameWin} size={this.boardSize} /> \n        {gameOver && (\n          <Modal activePlayer={activePlayer} winner={gameOver}/>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}